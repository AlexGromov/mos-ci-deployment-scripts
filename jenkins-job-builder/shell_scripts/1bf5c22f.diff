From 1bf5c22f2df1399dbbcf9bbffd47b25e80401701 Mon Sep 17 00:00:00 2001
From: Alexander Makarov <amakarov@mirantis.com>
Date: Mon, 19 Sep 2016 15:01:31 +0300
Subject: [PATCH] Verbose 401/403 debug responses

Mitaka release hotfix. For next releases upstream patch is sufficient.

Closes-Bug: 1625120

Conflicts:
	keystone/common/request.py
	keystone/trust/controllers.py

Change-Id: Id5de16d446cf4fdacfefdad0523e84821e4fd72c
---

diff --git a/keystone/auth/core.py b/keystone/auth/core.py
index b865d82..815435e 100644
--- a/keystone/auth/core.py
+++ b/keystone/auth/core.py
@@ -91,4 +91,5 @@
                   authentication.
         :raises keystone.exception.Unauthorized: for authentication failure
         """
-        raise exception.Unauthorized()
+        msg = "Abstract AuthMethodHandler.authenticate() called"
+        raise exception.Unauthorized(msg)
diff --git a/keystone/auth/plugins/token.py b/keystone/auth/plugins/token.py
index 069f114..cf24761 100644
--- a/keystone/auth/plugins/token.py
+++ b/keystone/auth/plugins/token.py
@@ -62,7 +62,8 @@
         # privilege attacks
 
         if token_ref.oauth_scoped or token_ref.trust_scoped:
-            raise exception.Forbidden()
+            raise exception.ForbiddenAction(
+                action=_('rescope a delegated token'))
 
         if not CONF.token.allow_rescope_scoped_token:
             # Do not allow conversion from scoped tokens.
diff --git a/keystone/common/authorization.py b/keystone/common/authorization.py
index 414b952..d04847f 100644
--- a/keystone/common/authorization.py
+++ b/keystone/common/authorization.py
@@ -67,7 +67,7 @@
         auth_context['user_id'] = token.user_id
     except KeyError:
         LOG.warning(_LW('RBAC: Invalid user data in token'))
-        raise exception.Unauthorized()
+        raise exception.Unauthorized(_('No user_id in token'))
     auth_context['user_domain_id'] = token.user_domain_id
 
     if token.project_scoped:
diff --git a/keystone/common/controller.py b/keystone/common/controller.py
index 8672525..b0d84fd 100644
--- a/keystone/common/controller.py
+++ b/keystone/common/controller.py
@@ -98,9 +98,10 @@
         # function it would otherwise need to reload the token_ref from
         # backing store.
         wsgi.validate_token_bind(context, token_ref)
-    except exception.TokenNotFound:
-        LOG.warning(_LW('RBAC: Invalid token'))
-        raise exception.Unauthorized()
+    except exception.TokenNotFound as e:
+        msg = _LW('RBAC: Invalid token: %s') % str(e)
+        LOG.warning(msg)  # noqa
+        raise exception.Unauthorized(msg)
 
     auth_context = authorization.token_to_auth_context(token_ref)
 
@@ -731,9 +732,9 @@
         elif token_ref.project_scoped:
             return token_ref.project_domain_id
         else:
-            LOG.warning(
-                _LW('No domain information specified as part of list request'))
-            raise exception.Unauthorized()
+            msg = 'No domain information specified as part of list request'
+            LOG.warning(_LW(msg))  # noqa
+            raise exception.Unauthorized(_(msg))  # noqa
 
     def _get_domain_id_from_token(self, context):
         """Get the domain_id for a v3 create call.
diff --git a/keystone/common/utils.py b/keystone/common/utils.py
index 5438ad4..dfcf185 100644
--- a/keystone/common/utils.py
+++ b/keystone/common/utils.py
@@ -549,8 +549,9 @@
                         [authorization.AUTH_CONTEXT_ENV])
         return auth_context['token']
     except KeyError:
-        LOG.warning(_LW("Couldn't find the auth context."))
-        raise exception.Unauthorized()
+        msg = "Couldn't find the auth context."
+        LOG.warning(_LW(msg))  # noqa
+        raise exception.Unauthorized(_(msg))  # noqa
 
 
 URL_RESERVED_CHARS = ":/?#[]@!$&'()*+,;="
diff --git a/keystone/common/wsgi.py b/keystone/common/wsgi.py
index 04528a0..f099a01 100644
--- a/keystone/common/wsgi.py
+++ b/keystone/common/wsgi.py
@@ -77,27 +77,30 @@
             # no bind provided and none required
             return
         else:
-            LOG.info(_LI("No bind information present in token"))
-            raise exception.Unauthorized()
+            msg = "No bind information present in token."
+            LOG.info(_LI(msg))  # noqa
+            raise exception.Unauthorized(msg)
 
     # get the named mode if bind_mode is not one of the known
     name = None if permissive or bind_mode == 'required' else bind_mode
 
     if name and name not in bind:
         LOG.info(_LI("Named bind mode %s not in bind information"), name)
-        raise exception.Unauthorized()
+        raise exception.Unauthorized(
+            _("Named bind mode not in bind information"))
 
     for bind_type, identifier in bind.items():
         if bind_type == 'kerberos':
             if not (context['environment'].get('AUTH_TYPE', '').lower()
                     == 'negotiate'):
-                LOG.info(_LI("Kerberos credentials required and not present"))
-                raise exception.Unauthorized()
+                msg = _LI("Kerberos credentials required and not present")
+                LOG.info(msg)  # noqa
+                raise exception.Unauthorized(msg)
 
             if not context['environment'].get('REMOTE_USER') == identifier:
-                LOG.info(_LI("Kerberos credentials do not match "
-                             "those in bind"))
-                raise exception.Unauthorized()
+                msg = _LI("Kerberos credentials do not match those in bind")
+                LOG.info(msg)  # noqa
+                raise exception.Unauthorized(msg)
 
             LOG.info(_LI("Kerberos bind authentication successful"))
 
@@ -109,7 +112,7 @@
             LOG.info(_LI("Couldn't verify unknown bind: "
                          "{%(bind_type)s: %(identifier)s}"),
                      {'bind_type': bind_type, 'identifier': identifier})
-            raise exception.Unauthorized()
+            raise exception.Unauthorized("Couldn't verify unknown bind")
 
 
 def best_match_language(req):
@@ -316,13 +319,13 @@
                 creds['user_id'] = user_token_ref.user_id
             except exception.UnexpectedError:
                 LOG.debug('Invalid user')
-                raise exception.Unauthorized()
+                raise exception.Unauthorized('Invalid user')
 
             if user_token_ref.project_scoped:
                 creds['tenant_id'] = user_token_ref.project_id
             else:
                 LOG.debug('Invalid tenant')
-                raise exception.Unauthorized()
+                raise exception.Unauthorized('Invalid tenant')
 
             creds['roles'] = user_token_ref.role_names
             # Accept either is_admin or the admin role
diff --git a/keystone/identity/controllers.py b/keystone/identity/controllers.py
index 9e8ba6f..989eed9 100644
--- a/keystone/identity/controllers.py
+++ b/keystone/identity/controllers.py
@@ -286,8 +286,9 @@
         try:
             self.identity_api.change_password(
                 context, user_id, original_password, password)
-        except AssertionError:
-            raise exception.Unauthorized()
+        except AssertionError as e:
+            raise exception.Unauthorized(
+                'Assertion error on v3 password change: %s' % str(e))
 
 
 @dependency.requires('identity_api')
diff --git a/keystone/middleware/auth.py b/keystone/middleware/auth.py
index cc7d0ec..077abc0 100644
--- a/keystone/middleware/auth.py
+++ b/keystone/middleware/auth.py
@@ -98,9 +98,10 @@
             # middleware
             wsgi.validate_token_bind(context, token_ref)
             return authorization.token_to_auth_context(token_ref), False
-        except exception.TokenNotFound:
-            LOG.warning(_LW('RBAC: Invalid token'))
-            raise exception.Unauthorized()
+        except exception.TokenNotFound as e:
+            msg = _LW('RBAC: Invalid token: %s') % str(e)
+            LOG.warning(msg)  # noqa
+            raise exception.Unauthorized(msg)
 
     def _build_tokenless_auth_context(self, env):
         """Build the authentication context.
diff --git a/keystone/token/controllers.py b/keystone/token/controllers.py
index 6eeb23e..273f37a 100644
--- a/keystone/token/controllers.py
+++ b/keystone/token/controllers.py
@@ -153,7 +153,8 @@
     def _restrict_scope(self, token_model_ref):
         # A trust token cannot be used to get another token
         if token_model_ref.trust_scoped:
-            raise exception.Forbidden()
+            raise exception.ForbiddenAction(
+                action=_('rescope a delegated token'))
         if not CONF.token.allow_rescope_scoped_token:
             # Do not allow conversion from scoped tokens.
             if token_model_ref.project_scoped or token_model_ref.domain_scoped:
@@ -197,25 +198,26 @@
             try:
                 trust_ref = self.trust_api.get_trust(auth['trust_id'])
             except exception.TrustNotFound:
-                raise exception.Forbidden()
+                raise exception.Forbidden(_('Trust not found'))
             if user_id != trust_ref['trustee_user_id']:
-                raise exception.Forbidden()
+                raise exception.Forbidden(_('User is not a trustee'))
             if (trust_ref['project_id'] and
                     tenant_id != trust_ref['project_id']):
-                raise exception.Forbidden()
+                raise exception.Forbidden(
+                    _('Trust is scoped to another project'))
             if ('expires' in trust_ref) and (trust_ref['expires']):
                 expiry = trust_ref['expires']
                 if expiry < timeutils.parse_isotime(utils.isotime()):
-                    raise exception.Forbidden()
+                    raise exception.Forbidden(_('Trust expired'))
             user_id = trust_ref['trustor_user_id']
             trustor_user_ref = self.identity_api.get_user(
                 trust_ref['trustor_user_id'])
             if not trustor_user_ref['enabled']:
-                raise exception.Forbidden()
+                raise exception.Forbidden(_('Trustor is disabled'))
             trustee_user_ref = self.identity_api.get_user(
                 trust_ref['trustee_user_id'])
             if not trustee_user_ref['enabled']:
-                raise exception.Forbidden()
+                raise exception.Forbidden(_('Trustee is disabled'))
 
             if trust_ref['impersonation'] is True:
                 current_user_ref = trustor_user_ref
@@ -235,11 +237,13 @@
             trust_roles = []
             for role in trust_ref['roles']:
                 if 'roles' not in metadata_ref:
-                    raise exception.Forbidden()
+                    raise exception.Forbidden(
+                        _('Auth metadata creation error'))
                 if role['id'] in metadata_ref['roles']:
                     trust_roles.append(role['id'])
                 else:
-                    raise exception.Forbidden()
+                    raise exception.Forbidden(
+                        _('Trustor cannot provide roles for trust'))
             if 'expiry' in trust_ref and trust_ref['expiry']:
                 trust_expiry = timeutils.parse_isotime(trust_ref['expiry'])
                 if trust_expiry < expiry:
diff --git a/keystone/token/provider.py b/keystone/token/provider.py
index 7c4166f..99f35b5 100644
--- a/keystone/token/provider.py
+++ b/keystone/token/provider.py
@@ -353,7 +353,7 @@
             token_data = token['access']['token']
             if ('tenant' not in token_data or
                     token_data['tenant']['id'] != belongs_to):
-                raise exception.Unauthorized()
+                raise exception.Unauthorized('Token tenant mismatch')
 
     def issue_v2_token(self, token_ref, roles_ref=None, catalog_ref=None):
         token_id, token_data = self.driver.issue_v2_token(
diff --git a/keystone/token/providers/common.py b/keystone/token/providers/common.py
index 9472917..3961eb5 100644
--- a/keystone/token/providers/common.py
+++ b/keystone/token/providers/common.py
@@ -653,7 +653,7 @@
     def _verify_token_ref(self, token_ref):
         """Verify and return the given token_ref."""
         if not token_ref:
-            raise exception.Unauthorized()
+            raise exception.Unauthorized('Token is absend.')
         return token_ref
 
     def _assert_is_not_federation_token(self, token_ref):
diff --git a/keystone/trust/controllers.py b/keystone/trust/controllers.py
index 0058130..71a4442 100644
--- a/keystone/trust/controllers.py
+++ b/keystone/trust/controllers.py
@@ -31,12 +31,14 @@
 def _trustor_trustee_only(trust, user_id):
     if (user_id != trust.get('trustee_user_id') and
             user_id != trust.get('trustor_user_id')):
-                raise exception.Forbidden()
+                raise exception.Forbidden(
+                    _('Requested user has no relation to this trust'))
 
 
 def _admin_trustor_only(context, trust, user_id):
     if user_id != trust.get('trustor_user_id') and not context['is_admin']:
-        raise exception.Forbidden()
+        raise exception.Forbidden(
+            _('Trustor must be an admin'))
 
 
 @dependency.requires('assignment_api', 'identity_api', 'resource_api',
@@ -225,14 +227,16 @@
             user_id = query['trustor_user_id']
             calling_user_id = self._get_user_id(context)
             if user_id != calling_user_id:
-                raise exception.Forbidden()
+                raise exception.Forbidden(
+                    _('Cannot list trusts for another user'))
             trusts += (self.trust_api.
                        list_trusts_for_trustor(user_id))
         if 'trustee_user_id' in query:
             user_id = query['trustee_user_id']
             calling_user_id = self._get_user_id(context)
             if user_id != calling_user_id:
-                raise exception.Forbidden()
+                raise exception.Forbidden(
+                    _('Cannot list trusts for another user'))
             trusts += self.trust_api.list_trusts_for_trustee(user_id)
         for trust in trusts:
             # get_trust returns roles, list_trusts does not
diff --git a/keystone/v2_crud/user_crud.py b/keystone/v2_crud/user_crud.py
index 9da7f31..1e0a977 100644
--- a/keystone/v2_crud/user_crud.py
+++ b/keystone/v2_crud/user_crud.py
@@ -72,8 +72,9 @@
             if not user_ref.get('enabled', True):
                 # NOTE(dolph): why can't you set a disabled user's password?
                 raise exception.Unauthorized('User is disabled')
-        except AssertionError:
-            raise exception.Unauthorized()
+        except AssertionError as e:
+            raise exception.Unauthorized(
+                'Assertion error on v2 password change: %s' % str(e))
 
         update_dict = {'password': user['password'], 'id': user_id}
 
